---
title: Homework 7 - Creating a resume database
author: Michael Martinez-Posadas
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

In this document is a set of queries that acquire specific information about the sql document and pulls those tables. 


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-MMartinezPos>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```

```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```

```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```

```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This assignment involves creating a company-wide resume database using MySQL. Your boss has tasked you with building a comprehensive database to capture the skills, certifications, and roles of all employees. This will help your sensei identify specific skills, explore employee skillsets, and identify skill gaps within the company.

## Crows-foot diagram

The diagram illustrates the relationships between Skills, People, Roles, and their associations.

Skills can be associated with one or many entries in the People-Skills table, indicating the skills possessed by various individuals. Conversely, a person (People) can possess multiple skills, creating a many-to-many relationship.

People can assume one or many roles (Roles) through the People-Roles table. Each role is filled by one or more individuals, establishing a many-to-many relationship between People and Roles.

This representation allows for a comprehensive view of how skills, people, and roles are interconnected in the database, facilitating queries and reports related to skill acquisition, employee roles, and overall skill distribution within the organization.


```{mermaid}
%%| echo: false
erDiagram
    SKILLS ||--o{ PEOPLE-SKILLS : ASSOCIATES
    PEOPLE ||--o{ PEOPLE-SKILLS : POSSESSES
    PEOPLE ||--o{ PEOPLE-ROLES : ASSUMES
    ROLES ||--o{ PEOPLE-ROLES : FILLED_BY

    SKILLS {
        int skills_id
        varchar(256) skills_name
        text skills_description
        varchar(256) skills_tag
        varchar(256) skills_url
        varchar(256) skills_time_commitment
    }

    PEOPLE {
        int people_id
        varchar(256) people_first_name
        varchar(256) people_last_name
        varchar(256) people_email
        varchar(256) people_linkedin_url
        varchar(256) people_headshot_url
        varchar(256) people_discord_handle
        varchar(256) people_brief_bio
        date people_date_joined
    }

    PEOPLE-SKILLS {
        int id
        int skills_id
        int people_id
        date date_acquired
    }

    ROLES {
        int id
        varchar(256) name
        int sort_priority
    }

    PEOPLE-ROLES {
        int id
        int people_id
        int role_id
        date date_assigned
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe people's personal info such as first and last name, email, linkedin URL, headshot url, discord handle, bio, and the date they joined. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe a list of skills with their appropriate description, tag, url, and time commitment amount.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the different roles that are available and what priority levels correspond with each role.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
sql = f"""
SELECT skills_name, skills_tag, skills_description 
FROM skills 
ORDER BY skills_name;
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python} 
sql = f"""
SELECT people_first_name, people_last_name, people_email 
FROM people 
ORDER BY people_last_name;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python} 
sql = f"""
SELECT skills.skills_name 
FROM skills 
JOIN peopleskills ON skills.skills_id = peopleskills.skills_id 
WHERE peopleskills.people_id = 1;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python} 
sql = f"""
SELECT people.people_first_name, people.people_last_name
FROM people
JOIN peopleskills ON people.people_id = peopleskills.people_id
WHERE peopleskills.skills_id = 6;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python} 
sql = f"""
SELECT people.people_first_name, people.people_last_name
FROM people
JOIN peopleroles ON people.people_id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
WHERE roles.name = 'Developer';
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python} 
sql = f"""
SELECT people.people_first_name, people.people_last_name, people.people_email
FROM people
WHERE people.people_id NOT IN (SELECT peopleskills.people_id FROM peopleskills);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python} 
sql = f"""
SELECT skills.skills_name, skills.skills_tag
FROM skills
WHERE skills.skills_id NOT IN (SELECT peopleskills.skills_id FROM peopleskills);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python} 
sql = f"""
SELECT people.people_first_name, people.people_last_name, skills.skills_name
FROM people
JOIN peopleroles ON people.people_id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
JOIN peopleskills ON people.people_id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.skills_id
WHERE roles.name = 'Boss';
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python} 
sql = f"""
SELECT roles.id, roles.name
FROM roles
WHERE roles.id NOT IN (SELECT peopleroles.role_id FROM peopleroles);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

This assignment helped me visualize how the queries work. I made more use of JOIN and SELECT which was a great way to practice the queries. I believe that I have improved significantly from this assignment in that regard. I would like to see how the queries would work on a larger scale database in the future (or my final project). It was also interesting creating the actual tables that are being used as well. It was helpful that SQL gives even the slightest of syntax errors when something isn't working. Overall it was a good assignment. 


